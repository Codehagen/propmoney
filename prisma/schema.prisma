// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ENUMS

enum UserRole {
  TENANT
  LANDLORD
  PROPERTY_MANAGER
  ADMIN
}

enum ApplicationStatus {
  PENDING
  APPROVED
  REJECTED
  CANCELLED
}

enum LeaseStatus {
  DRAFT
  ACTIVE
  EXPIRED
  TERMINATED
  RENEWED
}

enum LeaseType {
  TRIPLE_NET // Tenant pays rent plus all expenses (NNN)
  MODIFIED_GROSS // Tenant pays rent plus some expenses
  FULL_SERVICE // Landlord pays all expenses (Gross)
  PERCENTAGE // Base rent plus percentage of sales
}

enum PropertyClass {
  CLASS_A
  CLASS_B
  CLASS_C
  CLASS_D
}

enum PropertyType {
  OFFICE
  RETAIL
  INDUSTRIAL
  WAREHOUSE
  MIXED_USE
  HOSPITALITY
  HEALTHCARE
  OTHER
}

enum PaymentStatus {
  PENDING
  PAID
  OVERDUE
  CANCELLED
  REFUNDED
}

enum PaymentType {
  RENT
  DEPOSIT
  CAM
  PROPERTY_TAX
  INSURANCE
  UTILITY
  MAINTENANCE
  LATE_FEE
  OTHER
}

enum MaintenanceRequestStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum MaintenancePriority {
  HIGH
  MEDIUM
  LOW
}

enum NotificationType {
  PAYMENT_REMINDER
  PAYMENT_RECEIVED
  LEASE_EXPIRING
  MAINTENANCE_UPDATE
  APPLICATION_UPDATE
  MESSAGE
  DOCUMENT_SHARED
  INVOICE_CREATED
  CAM_RECONCILIATION
  EXPENSE_UPDATE
}

enum InvoiceStatus {
  DRAFT
  SENT
  PARTIALLY_PAID
  PAID
  OVERDUE
  CANCELLED
  REFUNDED
}

enum ExpenseCategory {
  MAINTENANCE
  CLEANING
  SECURITY
  UTILITIES
  INSURANCE
  PROPERTY_TAX
  MANAGEMENT_FEE
  LANDSCAPING
  HVAC
  ELEVATOR
  ADMINISTRATIVE
  OTHER
}

enum RentEscalationType {
  FIXED
  CPI
  PERCENTAGE
  STEPPED
}

// MODELS

model User {
  id                  String               @id @default(cuid())
  email               String               @unique
  name                String?
  phone               String?
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  role                UserRole             @default(TENANT)
  profileImageUrl     String?
  verified            Boolean              @default(false)
  emailVerified       Boolean              @default(false)
  image               String?
  // Relations
  tenantContacts      TenantContact[]
  landlordProfile     Landlord?
  managerProfile      PropertyManager?
  organizations       OrganizationMember[]
  notifications       Notification[]
  maintenanceRequests MaintenanceRequest[] @relation("RequestedBy")
  documents           Document[]           @relation("UploadedBy")
  messages            Message[]            @relation("MessageAuthor")
  messagesReceived    Message[]            @relation("MessageRecipient")
  sessions            Session[]
  accounts            Account[]

  @@map("user")
}

model Organization {
  id             String               @id @default(cuid())
  name           String
  logo           String?
  createdAt      DateTime             @default(now())
  updatedAt      DateTime             @updatedAt
  // Relations
  members        OrganizationMember[]
  properties     Property[]
  subscriptionId String?
  billingEmail   String?
  tenants        CommercialTenant[]
}

model OrganizationMember {
  id             String       @id @default(cuid())
  userId         String
  organizationId String
  role           UserRole
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  // Relations
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([userId, organizationId])
}

model Landlord {
  id              String     @id @default(cuid())
  userId          String     @unique
  taxId           String?
  businessName    String?
  businessAddress String?
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  // Relations
  user            User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  properties      Property[]
}

model PropertyManager {
  id                String                     @id @default(cuid())
  userId            String                     @unique
  licenseNumber     String?
  createdAt         DateTime                   @default(now())
  updatedAt         DateTime                   @updatedAt
  // Relations
  user              User                       @relation(fields: [userId], references: [id], onDelete: Cascade)
  managedProperties PropertyManager_Property[]
}

model PropertyManager_Property {
  managerId  String
  propertyId String
  assignedAt DateTime        @default(now())
  // Relations
  manager    PropertyManager @relation(fields: [managerId], references: [id], onDelete: Cascade)
  property   Property        @relation(fields: [propertyId], references: [id], onDelete: Cascade)

  @@id([managerId, propertyId])
}

model CommercialTenant {
  id                 String           @id @default(cuid())
  name               String
  organizationNumber String? // Norwegian business registration number
  vatNumber          String?
  industry           String?
  foundedYear        Int?
  website            String?
  organizationId     String?
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  // Relations
  organization       Organization?    @relation(fields: [organizationId], references: [id])
  contacts           TenantContact[]
  applications       Application[]
  leases             Lease[]
  payments           Payment[]
  invoices           Invoice[]
  financials         TenantFinancial?
}

model TenantContact {
  id        String           @id @default(cuid())
  tenantId  String
  userId    String?
  name      String
  email     String
  phone     String?
  position  String?
  isPrimary Boolean          @default(false)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  // Relations
  tenant    CommercialTenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  user      User?            @relation(fields: [userId], references: [id])
}

model TenantFinancial {
  id              String           @id @default(cuid())
  tenantId        String           @unique
  annualRevenue   Decimal?         @db.Decimal(14, 2)
  creditScore     Int?
  financialRating String? // e.g., AAA, BBB
  lastUpdated     DateTime         @default(now())
  // Relations
  tenant          CommercialTenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)
}

model Property {
  id                    String                     @id @default(cuid())
  title                 String
  description           String?                    @db.Text
  address               String
  city                  String
  state                 String
  zipCode               String
  country               String                     @default("Norway")
  latitude              Float?
  longitude             Float?
  propertyType          PropertyType               @default(OFFICE)
  propertyClass         PropertyClass?
  yearBuilt             Int?
  totalBTA              Int // Bruttoareal (Gross Area) in m²
  totalBRA              Int // Bruksareal (Usable Area) in m²
  commonAreaBRA         Int? // Common Area in m²
  floors                Int                        @default(1)
  parkingSpaces         Int?
  isActive              Boolean                    @default(true)
  availabilityDate      DateTime?
  createdAt             DateTime                   @default(now())
  updatedAt             DateTime                   @updatedAt
  organizationId        String?
  landlordId            String?
  // Relations
  organization          Organization?              @relation(fields: [organizationId], references: [id])
  landlord              Landlord?                  @relation(fields: [landlordId], references: [id])
  managers              PropertyManager_Property[]
  units                 CommercialUnit[]
  amenities             PropertyAmenity[]
  images                PropertyImage[]
  applications          Application[]
  maintenanceRequests   MaintenanceRequest[]
  expenses              OperatingExpense[]
  camSettings           CamSettings?
  financialYearSettings FinancialYearSettings?
}

model CommercialUnit {
  id               String        @id @default(cuid())
  propertyId       String
  unitNumber       String
  floor            Int
  bra              Int // Bruksareal (Usable Area) in m²
  commonAreaFactor Float         @default(1.0) // For calculating share of common expenses
  basePrice        Decimal       @db.Decimal(10, 2) // Base price per m² per year
  isAvailable      Boolean       @default(true)
  availabilityDate DateTime?
  description      String?       @db.Text
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  // Relations
  property         Property      @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  leases           Lease[]
  applications     Application[]
}

model PropertyAmenity {
  id          String   @id @default(cuid())
  propertyId  String
  name        String
  description String?
  // Relations
  property    Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)

  @@unique([propertyId, name])
}

model PropertyImage {
  id         String   @id @default(cuid())
  propertyId String
  url        String
  caption    String?
  isPrimary  Boolean  @default(false)
  createdAt  DateTime @default(now())
  // Relations
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
}

model Application {
  id             String            @id @default(cuid())
  tenantId       String
  propertyId     String
  unitId         String?
  status         ApplicationStatus @default(PENDING)
  moveInDate     DateTime
  applicationFee Decimal?          @db.Decimal(10, 2)
  feeStatus      PaymentStatus     @default(PENDING)
  documents      Document[]
  notes          String?           @db.Text
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  // Relations
  tenant         CommercialTenant  @relation(fields: [tenantId], references: [id])
  property       Property          @relation(fields: [propertyId], references: [id])
  unit           CommercialUnit?   @relation(fields: [unitId], references: [id])
  lease          Lease?
}

model RentEscalation {
  id            String             @id @default(cuid())
  leaseId       String
  type          RentEscalationType
  frequency     Int                @default(12) // In months (12 = annual)
  rate          Decimal            @db.Decimal(5, 2) // Percentage or fixed amount
  baseIndex     Decimal?           @db.Decimal(10, 2) // For CPI based escalation
  effectiveDate DateTime
  // Relations
  lease         Lease              @relation(fields: [leaseId], references: [id], onDelete: Cascade)
}

model Lease {
  id                     String           @id @default(cuid())
  applicationId          String?          @unique
  unitId                 String
  tenantId               String
  startDate              DateTime
  endDate                DateTime
  leaseType              LeaseType        @default(TRIPLE_NET)
  baseRentAmount         Decimal          @db.Decimal(12, 2) // Annual base rent
  rentPerSqm             Decimal          @db.Decimal(10, 2) // Rent per square meter per year
  securityDeposit        Decimal          @db.Decimal(12, 2)
  noticePeriodDays       Int              @default(90)
  hasTenantOptionToRenew Boolean          @default(false)
  tenantImprovements     Decimal?         @db.Decimal(12, 2) // Tenant improvement allowance
  status                 LeaseStatus      @default(DRAFT)
  documentUrl            String?
  createdAt              DateTime         @default(now())
  updatedAt              DateTime         @updatedAt
  // Relations
  application            Application?     @relation(fields: [applicationId], references: [id])
  unit                   CommercialUnit   @relation(fields: [unitId], references: [id])
  tenant                 CommercialTenant @relation(fields: [tenantId], references: [id])
  rentEscalations        RentEscalation[]
  payments               Payment[]
  documents              Document[]
  invoices               Invoice[]
  camCharges             CamCharge[]
}

model CamSettings {
  id                  String   @id @default(cuid())
  propertyId          String   @unique
  reconciliationMonth Int      @default(12) // Month when CAM is reconciled (1-12)
  estimationMethod    String   @default("PREVIOUS_YEAR") // PREVIOUS_YEAR, BUDGET, FIXED
  adminFeePercentage  Decimal  @default(0) @db.Decimal(5, 2)
  // Relations
  property            Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
}

model FinancialYearSettings {
  id         String   @id @default(cuid())
  propertyId String   @unique
  startMonth Int      @default(1) // 1 = January
  startDay   Int      @default(1)
  // Relations
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
}

model CamCharge {
  id              String           @id @default(cuid())
  leaseId         String
  year            Int
  monthlyEstimate Decimal          @db.Decimal(12, 2)
  annualEstimate  Decimal          @db.Decimal(12, 2)
  actualAmount    Decimal?         @db.Decimal(12, 2)
  reconciled      Boolean          @default(false)
  reconciledDate  DateTime?
  notes           String?          @db.Text
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  // Relations
  lease           Lease            @relation(fields: [leaseId], references: [id], onDelete: Cascade)
  expenseItems    CamExpenseItem[]
}

model CamExpenseItem {
  id          String          @id @default(cuid())
  camChargeId String
  category    ExpenseCategory
  description String
  estimate    Decimal         @db.Decimal(12, 2)
  actual      Decimal?        @db.Decimal(12, 2)
  // Relations
  camCharge   CamCharge       @relation(fields: [camChargeId], references: [id], onDelete: Cascade)
}

model OperatingExpense {
  id            String          @id @default(cuid())
  propertyId    String
  category      ExpenseCategory
  vendorName    String?
  description   String
  amount        Decimal         @db.Decimal(12, 2)
  date          DateTime
  invoiceNumber String?
  billable      Boolean         @default(true) // Whether this expense can be passed to tenants
  notes         String?         @db.Text
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  // Relations
  property      Property        @relation(fields: [propertyId], references: [id], onDelete: Cascade)
}

model Invoice {
  id               String           @id @default(cuid())
  leaseId          String
  tenantId         String
  invoiceNumber    String           @unique
  amount           Decimal          @db.Decimal(12, 2)
  status           InvoiceStatus    @default(DRAFT)
  issueDate        DateTime         @default(now())
  dueDate          DateTime
  paymentReference String?
  notes            String?          @db.Text
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  // Relations
  lease            Lease            @relation(fields: [leaseId], references: [id])
  tenant           CommercialTenant @relation(fields: [tenantId], references: [id])
  lineItems        InvoiceItem[]
  payments         Payment[]
}

model InvoiceItem {
  id          String  @id @default(cuid())
  invoiceId   String
  description String
  amount      Decimal @db.Decimal(12, 2)
  quantity    Int     @default(1)
  // Relations
  invoice     Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
}

model Payment {
  id            String           @id @default(cuid())
  leaseId       String
  tenantId      String
  invoiceId     String?
  amount        Decimal          @db.Decimal(12, 2)
  type          PaymentType
  status        PaymentStatus    @default(PENDING)
  dueDate       DateTime
  paidDate      DateTime?
  transactionId String?
  notes         String?          @db.Text
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  // Relations
  lease         Lease            @relation(fields: [leaseId], references: [id])
  tenant        CommercialTenant @relation(fields: [tenantId], references: [id])
  invoice       Invoice?         @relation(fields: [invoiceId], references: [id])
}

model MaintenanceRequest {
  id            String                    @id @default(cuid())
  propertyId    String
  requestedById String
  title         String
  description   String                    @db.Text
  priority      MaintenancePriority       @default(MEDIUM)
  status        MaintenanceRequestStatus  @default(PENDING)
  createdAt     DateTime                  @default(now())
  updatedAt     DateTime                  @updatedAt
  scheduledDate DateTime?
  completedDate DateTime?
  estimatedCost Decimal?                  @db.Decimal(10, 2)
  actualCost    Decimal?                  @db.Decimal(10, 2)
  billToTenant  Boolean                   @default(false)
  // Relations
  property      Property                  @relation(fields: [propertyId], references: [id])
  requestedBy   User                      @relation("RequestedBy", fields: [requestedById], references: [id])
  images        MaintenanceRequestImage[]
  updates       MaintenanceUpdate[]
}

model MaintenanceRequestImage {
  id        String             @id @default(cuid())
  requestId String
  url       String
  createdAt DateTime           @default(now())
  // Relations
  request   MaintenanceRequest @relation(fields: [requestId], references: [id], onDelete: Cascade)
}

model MaintenanceUpdate {
  id        String             @id @default(cuid())
  requestId String
  note      String             @db.Text
  createdAt DateTime           @default(now())
  // Relations
  request   MaintenanceRequest @relation(fields: [requestId], references: [id], onDelete: Cascade)
}

model Document {
  id            String       @id @default(cuid())
  name          String
  url           String
  type          String // Lease, Application, Financial, Insurance, etc.
  uploadedById  String
  createdAt     DateTime     @default(now())
  // Relations
  uploadedBy    User         @relation("UploadedBy", fields: [uploadedById], references: [id])
  application   Application? @relation(fields: [applicationId], references: [id])
  applicationId String?
  lease         Lease?       @relation(fields: [leaseId], references: [id])
  leaseId       String?
}

model Notification {
  id        String           @id @default(cuid())
  userId    String
  type      NotificationType
  title     String
  message   String
  isRead    Boolean          @default(false)
  actionUrl String?
  createdAt DateTime         @default(now())
  // Relations
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Message {
  id          String   @id @default(cuid())
  senderId    String
  recipientId String
  content     String   @db.Text
  isRead      Boolean  @default(false)
  createdAt   DateTime @default(now())
  // Relations
  sender      User     @relation("MessageAuthor", fields: [senderId], references: [id])
  recipient   User     @relation("MessageRecipient", fields: [recipientId], references: [id])
}

// Analytics models to store aggregated data

model PropertyAnalytics {
  id                   String   @id @default(cuid())
  propertyId           String   @unique
  viewCount            Int      @default(0)
  applicationCount     Int      @default(0)
  occupancyRatePercent Float?
  occupancyRateArea    Int? // Occupied area in m²
  avgLeaseLength       Int? // Average lease length in months
  avgRentPerSqm        Decimal? @db.Decimal(10, 2)
  updatedAt            DateTime @updatedAt
}

model FinancialSummary {
  id                   String   @id @default(cuid())
  organizationId       String?
  landlordId           String?
  propertyId           String?
  month                Int
  year                 Int
  totalRevenue         Decimal  @db.Decimal(14, 2)
  totalExpenses        Decimal  @db.Decimal(14, 2)
  operatingExpenses    Decimal  @db.Decimal(14, 2)
  netOperatingIncome   Decimal  @db.Decimal(14, 2)
  occupancyRatePercent Float?
  capRate              Float?
  updatedAt            DateTime @updatedAt

  @@unique([organizationId, month, year])
  @@unique([landlordId, month, year])
  @@unique([propertyId, month, year])
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}
